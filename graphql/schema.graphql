#import types/*.graphql

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    # seeClientActivites: [String] @field (resolver: "SystemQueries@userActivities")
    # @guard(with: ["api"])
}

type Mutation {
    login(input: LoginInput @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve"
        )
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve"
        )
    logout: LogoutResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve"
        )
    forgotPassword(
        input: ForgotPasswordInput! @spread
    ): ForgotPasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve"
        )
    updateForgottenPassword(
        input: NewPasswordWithCodeInput @spread
    ): ForgotPasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve"
        )
    register(input: RegisterInput @spread): RegisterResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve"
        )
    socialLogin(input: SocialLoginInput! @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve"
        )
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve"
        )
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve"
        )
        @guard(with: ["api"])

    fetchOffers(broker: BrokerTypes! @spread): OfferResponseData
        @field(resolver: "OffersMutation@fetchOffersForBroker")
        @guard(with: ["api"])

    fetchTreaties(broker: BrokerTypes! @spread): [MockTreatyStruct]
        @field(resolver: "TreatiesMutation@fetchTreatiesForBroker")
        @guard(with: ["api"])

    issueGuaranteeNote(broker: BrokerTypes! @spread): String
        @field(resolver: "OffersMutation@issueGuaranteeNote")
        @guard(with: ["api"])

    # approveTreatyPlacing()
    # Replace jdotcole233@gmail.com with conyuma@ghanare.com
}

union TreatyResponse = MockTreatyStruct | ErrorResponse
union OfferResponse = OfferResponseData | ErrorResponse

type OfferResponseData {
  total_offers: Int
  total_shares: String
  offers: [MockOfferStruct]
}

type MockTreatyStruct {
    treaty_id: ID
    treaty_participation_percentage: Float
    treaty_type: String
    treaty_name: String
    treaty_reference: String
    total_participation_percentage: Float
    insurance_company_name: String
    currency: String
    participant_id: ID
    treaty_account_id: [MockAccountID]
    layer_limit: [MockLayerLimit]
}

type MockLayerLimit {
    limit: String
    uuid: String
    m_and_d_premium: Float
    installment_type: String
}

type MockAccountID {
    treaty_account_id: ID
    account_periods: String
}

type ErrorResponse {
    error: String
    message: String
    status: Int
}

type MockOfferStruct {
    offersoffer_id: ID
    offer_participant_percentage: Float
    offer_amount: Float
    participant_fac_premium: Float
    participant_fac_sum_insured: Float
    offer: MockOffer
    offer_detail: MockOfferDetail
    payments: [MockPaymentStruct]
}

type MockPaymentStruct 
{
  offer_payment_amount: Float
  paid_details: String
}

type MockOffer {
    offer_id: ID
    insurersinsurer_id: ID
    insurance_company_name: String
    payment_status: MockPaymentStatus
    insurer: MockInsurerStruct
}

type MockOfferDetail {
    offersoffer_id: ID
    insured_by: String
    period_of_insurance_from: String
    period_of_insurance_to: String
    currency: String
}

type MockInsurerStruct
{
    insurer_id: ID
    insurer_company_name: String
}

enum MockPaymentStatus {
    PAID
    PARTPAYMENT
    UNPAID
}

enum MockTreatyType {
    PROPORTIONAL
    NONPROPORTIONAL
}

input OfferRequest {
    broker: String!
}

enum BrokerTypes {
    VISAL
    KEK
    IRISK
}

